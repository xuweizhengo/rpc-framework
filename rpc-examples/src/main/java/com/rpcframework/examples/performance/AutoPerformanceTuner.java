package com.rpcframework.examples.performance;

import com.rpcframework.examples.model.User;
import com.rpcframework.examples.service.UserService;
import com.rpcframework.examples.service.impl.UserServiceImpl;
import com.rpcframework.rpc.client.RpcClient;
import com.rpcframework.rpc.config.NetworkConfig;
import com.rpcframework.rpc.model.RpcRequest;
import com.rpcframework.rpc.model.RpcResponse;
import com.rpcframework.rpc.server.RpcRequestHandler;
import com.rpcframework.rpc.server.RpcServer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicLong;

/**
 * 自动性能调优器
 * 
 * <p>自动测试不同配置下的性能表现，找出最优配置参数。
 * 支持多维度性能测试和自动调优建议。
 * 
 * @author rpc-framework
 * @since 1.0.0
 */
public class AutoPerformanceTuner {
    
    private static final Logger logger = LoggerFactory.getLogger(AutoPerformanceTuner.class);
    
    public static void main(String[] args) {
        AutoPerformanceTuner tuner = new AutoPerformanceTuner();
        tuner.runAutoTuning();
    }
    
    /**
     * 运行自动调优
     */
    public void runAutoTuning() {
        logger.info("Starting Automatic Performance Tuning...");
        logger.info("Target: Find optimal configuration for 3000+ QPS with P99 < 50ms");
        
        try {
            // 1. 显示系统信息和调优建议
            showSystemInfoAndAdvice();
            
            // 2. 测试不同配置的性能
            List<ConfigurationTestResult> results = testDifferentConfigurations();
            
            // 3. 分析结果并给出建议
            analyzeResultsAndRecommend(results);
            
            // 4. 验证最优配置
            validateOptimalConfiguration(results);
            
        } catch (Exception e) {
            logger.error("Auto tuning failed", e);
        }
    }
    
    /**
     * 显示系统信息和调优建议
     */
    private void showSystemInfoAndAdvice() {
        logger.info("\\n=== System Analysis ===");
        
        PerformanceOptimizer.PerformanceTuningAdvice advice = 
            PerformanceOptimizer.getPerformanceTuningAdvice();
        advice.printAdvice();
    }
    
    /**
     * 测试不同配置的性能
     */\n    private List<ConfigurationTestResult> testDifferentConfigurations() {\n        logger.info(\"\\n=== Testing Different Configurations ===\");\n        \n        List<ConfigurationTestResult> results = new ArrayList<>();\n        \n        // 配置测试列表\n        ConfigurationTest[] tests = {\n            new ConfigurationTest(\"Default\", NetworkConfig.defaultConfig(), NetworkConfig.defaultConfig()),\n            new ConfigurationTest(\"Server-Optimized\", NetworkConfig.serverConfig(), NetworkConfig.clientConfig()),\n            new ConfigurationTest(\"High-Performance\", \n                PerformanceOptimizer.createHighPerformanceServerConfig(),\n                PerformanceOptimizer.createHighPerformanceClientConfig()),\n            new ConfigurationTest(\"Low-Latency\", \n                PerformanceOptimizer.createLowLatencyServerConfig(),\n                PerformanceOptimizer.createHighPerformanceClientConfig()),\n            new ConfigurationTest(\"High-Throughput\", \n                PerformanceOptimizer.createHighThroughputServerConfig(),\n                PerformanceOptimizer.createHighPerformanceClientConfig()),\n            // 自定义调优配置\n            new ConfigurationTest(\"Custom-Tuned\", \n                createCustomTunedServerConfig(),\n                createCustomTunedClientConfig())\n        };\n        \n        // 测试每个配置\n        for (ConfigurationTest test : tests) {\n            logger.info(\"\\nTesting configuration: {}\", test.name);\n            \n            try {\n                ConfigurationTestResult result = runConfigurationTest(test);\n                results.add(result);\n                \n                // 打印测试结果\n                logTestResult(result);\n                \n                // 测试间隔，让系统稳定\n                Thread.sleep(2000);\n                \n            } catch (Exception e) {\n                logger.error(\"Failed to test configuration: {}\", test.name, e);\n                ConfigurationTestResult failedResult = new ConfigurationTestResult(test.name);\n                failedResult.setSuccess(false);\n                failedResult.setErrorMessage(e.getMessage());\n                results.add(failedResult);\n            }\n        }\n        \n        return results;\n    }\n    \n    /**\n     * 运行单个配置测试\n     */\n    private ConfigurationTestResult runConfigurationTest(ConfigurationTest test) throws Exception {\n        ConfigurationTestResult result = new ConfigurationTestResult(test.name);\n        \n        RpcServer server = null;\n        List<RpcClient> clients = new ArrayList<>();\n        \n        try {\n            // 启动服务端\n            server = startTestServer(test.serverConfig);\n            Thread.sleep(1000); // 等待服务端启动\n            \n            // 创建客户端\n            int clientCount = 5;\n            for (int i = 0; i < clientCount; i++) {\n                RpcClient client = createTestClient(test.clientConfig);\n                clients.add(client);\n            }\n            \n            // 预热\n            warmup(clients, 200);\n            \n            // 性能测试\n            PerformanceMetrics metrics = runPerformanceTest(clients, 2000, 10); // 2000请求，10秒\n            \n            // 设置测试结果\n            result.setSuccess(true);\n            result.setQps(metrics.getQps());\n            result.setAverageLatency(metrics.getAverageLatency());\n            result.setP50Latency(metrics.getP50Latency());\n            result.setP90Latency(metrics.getP90Latency());\n            result.setP95Latency(metrics.getP95Latency());\n            result.setP99Latency(metrics.getP99Latency());\n            result.setMaxLatency(metrics.getMaxLatency());\n            result.setSuccessRate(metrics.getSuccessRate());\n            result.setTotalRequests(metrics.getTotalRequests());\n            result.setSuccessRequests(metrics.getSuccessRequests());\n            \n            // 评分\n            result.setScore(calculatePerformanceScore(metrics));\n            \n        } finally {\n            // 清理资源\n            for (RpcClient client : clients) {\n                try {\n                    if (client.isStarted()) {\n                        client.shutdown();\n                    }\n                } catch (Exception e) {\n                    logger.debug(\"Error shutting down client\", e);\n                }\n            }\n            \n            if (server != null && server.isStarted()) {\n                try {\n                    server.shutdown();\n                } catch (Exception e) {\n                    logger.debug(\"Error shutting down server\", e);\n                }\n            }\n        }\n        \n        return result;\n    }\n    \n    /**\n     * 启动测试服务端\n     */\n    private RpcServer startTestServer(NetworkConfig serverConfig) throws Exception {\n        RpcRequestHandler requestHandler = new RpcRequestHandler();\n        UserService userService = new UserServiceImpl();\n        requestHandler.registerService(UserService.class, userService);\n        \n        RpcServer server = new RpcServer(serverConfig, requestHandler);\n        server.start();\n        \n        return server;\n    }\n    \n    /**\n     * 创建测试客户端\n     */\n    private RpcClient createTestClient(NetworkConfig clientConfig) throws Exception {\n        RpcClient client = new RpcClient(\"localhost\", clientConfig.getServerPort(), clientConfig);\n        client.start();\n        client.connect();\n        return client;\n    }\n    \n    /**\n     * 预热\n     */\n    private void warmup(List<RpcClient> clients, int warmupRequests) throws Exception {\n        logger.debug(\"Warming up with {} requests...\", warmupRequests);\n        \n        CountDownLatch latch = new CountDownLatch(warmupRequests);\n        ExecutorService executor = Executors.newFixedThreadPool(10);\n        \n        try {\n            for (int i = 0; i < warmupRequests; i++) {\n                RpcClient client = clients.get(i % clients.size());\n                \n                executor.submit(() -> {\n                    try {\n                        RpcRequest request = createTestRequest();\n                        client.sendRequest(request);\n                    } catch (Exception e) {\n                        // 忽略预热异常\n                    } finally {\n                        latch.countDown();\n                    }\n                });\n            }\n            \n            latch.await(30, TimeUnit.SECONDS);\n            \n        } finally {\n            executor.shutdown();\n        }\n    }\n    \n    /**\n     * 运行性能测试\n     */\n    private PerformanceMetrics runPerformanceTest(List<RpcClient> clients, int targetRequests, int durationSeconds) \n            throws Exception {\n        logger.debug(\"Running performance test: {} requests in {} seconds\", targetRequests, durationSeconds);\n        \n        PerformanceMetrics metrics = new PerformanceMetrics();\n        AtomicLong totalRequests = new AtomicLong(0);\n        AtomicLong successRequests = new AtomicLong(0);\n        List<Long> latencies = new CopyOnWriteArrayList<>();\n        \n        ExecutorService executor = Executors.newFixedThreadPool(clients.size() * 2);\n        CountDownLatch latch = new CountDownLatch(targetRequests);\n        \n        long startTime = System.currentTimeMillis();\n        \n        try {\n            // 生成请求\n            for (int i = 0; i < targetRequests; i++) {\n                RpcClient client = clients.get(i % clients.size());\n                \n                executor.submit(() -> {\n                    long requestStart = System.nanoTime();\n                    \n                    try {\n                        RpcRequest request = createTestRequest();\n                        RpcResponse response = client.sendRequest(request);\n                        \n                        long requestEnd = System.nanoTime();\n                        long latency = (requestEnd - requestStart) / 1_000_000; // ms\n                        latencies.add(latency);\n                        \n                        totalRequests.incrementAndGet();\n                        if (response.isSuccess()) {\n                            successRequests.incrementAndGet();\n                        }\n                        \n                    } catch (Exception e) {\n                        totalRequests.incrementAndGet();\n                    } finally {\n                        latch.countDown();\n                    }\n                });\n            }\n            \n            // 等待完成或超时\n            boolean completed = latch.await(durationSeconds + 10, TimeUnit.SECONDS);\n            long duration = System.currentTimeMillis() - startTime;\n            \n            // 计算指标\n            metrics.setTotalRequests(totalRequests.get());\n            metrics.setSuccessRequests(successRequests.get());\n            metrics.setDuration(duration);\n            metrics.setQps((double) totalRequests.get() / duration * 1000);\n            metrics.setSuccessRate((double) successRequests.get() / totalRequests.get() * 100);\n            \n            // 计算延迟统计\n            if (!latencies.isEmpty()) {\n                List<Long> sortedLatencies = new ArrayList<>(latencies);\n                sortedLatencies.sort(Long::compareTo);\n                \n                int size = sortedLatencies.size();\n                metrics.setAverageLatency(sortedLatencies.stream().mapToLong(Long::longValue).average().orElse(0.0));\n                metrics.setP50Latency(sortedLatencies.get(size / 2));\n                metrics.setP90Latency(sortedLatencies.get((int) (size * 0.9)));\n                metrics.setP95Latency(sortedLatencies.get((int) (size * 0.95)));\n                metrics.setP99Latency(sortedLatencies.get((int) (size * 0.99)));\n                metrics.setMaxLatency(sortedLatencies.get(size - 1));\n            }\n            \n        } finally {\n            executor.shutdown();\n        }\n        \n        return metrics;\n    }\n    \n    /**\n     * 创建测试请求\n     */\n    private RpcRequest createTestRequest() {\n        RpcRequest request = new RpcRequest();\n        request.setInterfaceName(UserService.class.getName());\n        request.setMethodName(\"getUserById\");\n        request.setParameters(new Object[]{1L});\n        request.setParameterTypes(new Class[]{Long.class});\n        return request;\n    }\n    \n    /**\n     * 计算性能评分\n     */\n    private double calculatePerformanceScore(PerformanceMetrics metrics) {\n        double score = 0;\n        \n        // QPS评分 (0-40分)\n        double qpsScore = Math.min(40, metrics.getQps() / 3000 * 40);\n        score += qpsScore;\n        \n        // P99延迟评分 (0-30分)\n        double latencyScore = 0;\n        if (metrics.getP99Latency() <= 10) {\n            latencyScore = 30;\n        } else if (metrics.getP99Latency() <= 50) {\n            latencyScore = 20;\n        } else if (metrics.getP99Latency() <= 100) {\n            latencyScore = 10;\n        }\n        score += latencyScore;\n        \n        // 成功率评分 (0-20分)\n        double successScore = metrics.getSuccessRate() / 100 * 20;\n        score += successScore;\n        \n        // 平均延迟评分 (0-10分)\n        double avgLatencyScore = 0;\n        if (metrics.getAverageLatency() <= 5) {\n            avgLatencyScore = 10;\n        } else if (metrics.getAverageLatency() <= 20) {\n            avgLatencyScore = 5;\n        }\n        score += avgLatencyScore;\n        \n        return score;\n    }\n    \n    /**\n     * 记录测试结果\n     */\n    private void logTestResult(ConfigurationTestResult result) {\n        if (result.isSuccess()) {\n            logger.info(\"  QPS: {:.2f}\", result.getQps());\n            logger.info(\"  Success Rate: {:.2f}%\", result.getSuccessRate());\n            logger.info(\"  Avg Latency: {:.2f}ms\", result.getAverageLatency());\n            logger.info(\"  P99 Latency: {}ms\", result.getP99Latency());\n            logger.info(\"  Score: {:.2f}/100\", result.getScore());\n            \n            // 检查是否达到目标\n            if (result.getQps() >= 3000 && result.getP99Latency() <= 50) {\n                logger.info(\"  ✅ Target achieved!\");\n            } else {\n                logger.info(\"  ❌ Target missed\");\n            }\n        } else {\n            logger.error(\"  Test failed: {}\", result.getErrorMessage());\n        }\n    }\n    \n    /**\n     * 分析结果并推荐\n     */\n    private void analyzeResultsAndRecommend(List<ConfigurationTestResult> results) {\n        logger.info(\"\\n=== Performance Analysis and Recommendations ===\");\n        \n        // 找出最佳配置\n        ConfigurationTestResult bestConfig = results.stream()\n            .filter(ConfigurationTestResult::isSuccess)\n            .max((r1, r2) -> Double.compare(r1.getScore(), r2.getScore()))\n            .orElse(null);\n        \n        if (bestConfig != null) {\n            logger.info(\"Best Configuration: {}\", bestConfig.getConfigName());\n            logger.info(\"  Score: {:.2f}/100\", bestConfig.getScore());\n            logger.info(\"  QPS: {:.2f}\", bestConfig.getQps());\n            logger.info(\"  P99 Latency: {}ms\", bestConfig.getP99Latency());\n        }\n        \n        // 分析各配置表现\n        logger.info(\"\\nConfiguration Comparison:\");\n        results.stream()\n            .filter(ConfigurationTestResult::isSuccess)\n            .sorted((r1, r2) -> Double.compare(r2.getScore(), r1.getScore()))\n            .forEach(result -> {\n                logger.info(\"  {}: Score={:.1f}, QPS={:.1f}, P99={}ms\", \n                    result.getConfigName(), result.getScore(), result.getQps(), result.getP99Latency());\n            });\n        \n        // 给出优化建议\n        giveOptimizationRecommendations(results);\n    }\n    \n    /**\n     * 给出优化建议\n     */\n    private void giveOptimizationRecommendations(List<ConfigurationTestResult> results) {\n        logger.info(\"\\nOptimization Recommendations:\");\n        \n        // 基于测试结果的建议\n        ConfigurationTestResult bestResult = results.stream()\n            .filter(ConfigurationTestResult::isSuccess)\n            .max((r1, r2) -> Double.compare(r1.getScore(), r2.getScore()))\n            .orElse(null);\n        \n        if (bestResult != null) {\n            if (bestResult.getQps() < 3000) {\n                logger.info(\"  - QPS未达标，建议:\");\n                logger.info(\"    * 增加Worker线程数\");\n                logger.info(\"    * 启用Epoll (Linux环境)\");\n                logger.info(\"    * 增大网络缓冲区\");\n                logger.info(\"    * 使用多个客户端连接\");\n            }\n            \n            if (bestResult.getP99Latency() > 50) {\n                logger.info(\"  - P99延迟过高，建议:\");\n                logger.info(\"    * 启用TCP_NODELAY禁用Nagle算法\");\n                logger.info(\"    * 减少GC频率，使用G1收集器\");\n                logger.info(\"    * 启用直接内存和内存池\");\n                logger.info(\"    * 优化序列化性能\");\n            }\n            \n            if (bestResult.getSuccessRate() < 99) {\n                logger.info(\"  - 成功率偏低，建议:\");\n                logger.info(\"    * 增加连接超时时间\");\n                logger.info(\"    * 启用重试机制\");\n                logger.info(\"    * 增加服务端最大连接数\");\n            }\n        }\n        \n        logger.info(\"  - 通用优化建议:\");\n        logger.info(\"    * 使用连接池复用连接\");\n        logger.info(\"    * 启用异步调用提高并发\");\n        logger.info(\"    * 监控GC性能和网络指标\");\n        logger.info(\"    * 根据业务特点选择合适的配置\");\n    }\n    \n    /**\n     * 验证最优配置\n     */\n    private void validateOptimalConfiguration(List<ConfigurationTestResult> results) {\n        logger.info(\"\\n=== Optimal Configuration Validation ===\");\n        \n        ConfigurationTestResult bestConfig = results.stream()\n            .filter(ConfigurationTestResult::isSuccess)\n            .max((r1, r2) -> Double.compare(r1.getScore(), r2.getScore()))\n            .orElse(null);\n        \n        if (bestConfig != null) {\n            logger.info(\"Recommended Configuration: {}\", bestConfig.getConfigName());\n            \n            if (bestConfig.getQps() >= 3000 && bestConfig.getP99Latency() <= 50) {\n                logger.info(\"✅ Performance target achieved!\");\n                logger.info(\"   QPS: {:.2f} >= 3000\", bestConfig.getQps());\n                logger.info(\"   P99 Latency: {}ms <= 50ms\", bestConfig.getP99Latency());\n            } else {\n                logger.warn(\"❌ Performance target not fully achieved\");\n                logger.warn(\"   QPS: {:.2f} (target: 3000+)\", bestConfig.getQps());\n                logger.warn(\"   P99 Latency: {}ms (target: <50ms)\", bestConfig.getP99Latency());\n                logger.warn(\"   Consider further optimization or hardware upgrade\");\n            }\n        } else {\n            logger.error(\"No successful configuration found!\");\n        }\n    }\n    \n    /**\n     * 创建自定义调优配置\n     */\n    private NetworkConfig createCustomTunedServerConfig() {\n        int cpuCores = Runtime.getRuntime().availableProcessors();\n        \n        return NetworkConfig.serverConfig()\n            .setServerPort(8080)\n            .setBossThreads(1)\n            .setWorkerThreads(cpuCores * 3)  // 适度增加Worker线程\n            .setMaxConnections(3000)         // 平衡连接数和资源\n            .setBacklog(1024)\n            .setUseEpoll(true)\n            .setTcpNodelay(true)             // 优先延迟\n            .setKeepAlive(true)\n            .setReuseAddr(true)\n            .setRecvBufferSize(96 * 1024)    // 适中的缓冲区\n            .setSendBufferSize(96 * 1024)\n            .setUsePooledAllocator(true)\n            .setUseDirectMemory(true)\n            .setHeartbeatInterval(45000)\n            .setHeartbeatTimeout(10000);\n    }\n    \n    private NetworkConfig createCustomTunedClientConfig() {\n        int cpuCores = Runtime.getRuntime().availableProcessors();\n        \n        return NetworkConfig.clientConfig()\n            .setConnectTimeout(3000)\n            .setRequestTimeout(8000)         // 适中的超时时间\n            .setIoThreads(Math.max(2, cpuCores / 2))\n            .setMaxPoolSize(cpuCores * 4)    // 较大的连接池\n            .setMinPoolSize(2)\n            .setUseEpoll(true)\n            .setTcpNodelay(true)\n            .setKeepAlive(true)\n            .setRecvBufferSize(96 * 1024)\n            .setSendBufferSize(96 * 1024)\n            .setUsePooledAllocator(true)\n            .setUseDirectMemory(true)\n            .setMaxRetries(1)                // 快速失败\n            .setRetryInterval(200)\n            .setHeartbeatInterval(45000);\n    }\n    \n    // 内部类定义\n    private static class ConfigurationTest {\n        final String name;\n        final NetworkConfig serverConfig;\n        final NetworkConfig clientConfig;\n        \n        ConfigurationTest(String name, NetworkConfig serverConfig, NetworkConfig clientConfig) {\n            this.name = name;\n            this.serverConfig = serverConfig;\n            this.clientConfig = clientConfig;\n        }\n    }\n    \n    private static class ConfigurationTestResult {\n        private String configName;\n        private boolean success;\n        private String errorMessage;\n        private double qps;\n        private double averageLatency;\n        private long p50Latency;\n        private long p90Latency;\n        private long p95Latency;\n        private long p99Latency;\n        private long maxLatency;\n        private double successRate;\n        private long totalRequests;\n        private long successRequests;\n        private double score;\n        \n        ConfigurationTestResult(String configName) {\n            this.configName = configName;\n        }\n        \n        // Getters and Setters\n        public String getConfigName() { return configName; }\n        public boolean isSuccess() { return success; }\n        public void setSuccess(boolean success) { this.success = success; }\n        public String getErrorMessage() { return errorMessage; }\n        public void setErrorMessage(String errorMessage) { this.errorMessage = errorMessage; }\n        public double getQps() { return qps; }\n        public void setQps(double qps) { this.qps = qps; }\n        public double getAverageLatency() { return averageLatency; }\n        public void setAverageLatency(double averageLatency) { this.averageLatency = averageLatency; }\n        public long getP50Latency() { return p50Latency; }\n        public void setP50Latency(long p50Latency) { this.p50Latency = p50Latency; }\n        public long getP90Latency() { return p90Latency; }\n        public void setP90Latency(long p90Latency) { this.p90Latency = p90Latency; }\n        public long getP95Latency() { return p95Latency; }\n        public void setP95Latency(long p95Latency) { this.p95Latency = p95Latency; }\n        public long getP99Latency() { return p99Latency; }\n        public void setP99Latency(long p99Latency) { this.p99Latency = p99Latency; }\n        public long getMaxLatency() { return maxLatency; }\n        public void setMaxLatency(long maxLatency) { this.maxLatency = maxLatency; }\n        public double getSuccessRate() { return successRate; }\n        public void setSuccessRate(double successRate) { this.successRate = successRate; }\n        public long getTotalRequests() { return totalRequests; }\n        public void setTotalRequests(long totalRequests) { this.totalRequests = totalRequests; }\n        public long getSuccessRequests() { return successRequests; }\n        public void setSuccessRequests(long successRequests) { this.successRequests = successRequests; }\n        public double getScore() { return score; }\n        public void setScore(double score) { this.score = score; }\n    }\n    \n    private static class PerformanceMetrics {\n        private long totalRequests;\n        private long successRequests;\n        private long duration;\n        private double qps;\n        private double successRate;\n        private double averageLatency;\n        private long p50Latency;\n        private long p90Latency;\n        private long p95Latency;\n        private long p99Latency;\n        private long maxLatency;\n        \n        // Getters and Setters\n        public long getTotalRequests() { return totalRequests; }\n        public void setTotalRequests(long totalRequests) { this.totalRequests = totalRequests; }\n        public long getSuccessRequests() { return successRequests; }\n        public void setSuccessRequests(long successRequests) { this.successRequests = successRequests; }\n        public long getDuration() { return duration; }\n        public void setDuration(long duration) { this.duration = duration; }\n        public double getQps() { return qps; }\n        public void setQps(double qps) { this.qps = qps; }\n        public double getSuccessRate() { return successRate; }\n        public void setSuccessRate(double successRate) { this.successRate = successRate; }\n        public double getAverageLatency() { return averageLatency; }\n        public void setAverageLatency(double averageLatency) { this.averageLatency = averageLatency; }\n        public long getP50Latency() { return p50Latency; }\n        public void setP50Latency(long p50Latency) { this.p50Latency = p50Latency; }\n        public long getP90Latency() { return p90Latency; }\n        public void setP90Latency(long p90Latency) { this.p90Latency = p90Latency; }\n        public long getP95Latency() { return p95Latency; }\n        public void setP95Latency(long p95Latency) { this.p95Latency = p95Latency; }\n        public long getP99Latency() { return p99Latency; }\n        public void setP99Latency(long p99Latency) { this.p99Latency = p99Latency; }\n        public long getMaxLatency() { return maxLatency; }\n        public void setMaxLatency(long maxLatency) { this.maxLatency = maxLatency; }\n    }\n}