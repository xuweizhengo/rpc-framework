package com.rpcframework.examples.production;

import com.rpcframework.rpc.config.NetworkConfig;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Properties;

/**
 * 生产环境部署指南
 * 
 * <p>提供生产环境的配置建议、部署脚本和监控方案。
 * 涵盖高可用、性能调优、安全配置等生产级要求。
 * 
 * @author rpc-framework
 * @since 1.0.0
 */
public class ProductionDeploymentGuide {
    
    private static final Logger logger = LoggerFactory.getLogger(ProductionDeploymentGuide.class);
    
    /**
     * 生成生产环境配置
     */
    public static void generateProductionConfigs() {
        logger.info("Generating production environment configurations...");
        
        try {\n            // 1. 创建配置目录\n            createConfigDirectories();\n            \n            // 2. 生成服务端配置\n            generateServerConfigs();\n            \n            // 3. 生成客户端配置\n            generateClientConfigs();\n            \n            // 4. 生成部署脚本\n            generateDeploymentScripts();\n            \n            // 5. 生成监控配置\n            generateMonitoringConfigs();\n            \n            // 6. 生成日志配置\n            generateLoggingConfigs();\n            \n            // 7. 生成Docker配置\n            generateDockerConfigs();\n            \n            logger.info(\"Production configurations generated successfully!\");\n            \n        } catch (Exception e) {\n            logger.error(\"Failed to generate production configurations\", e);\n        }\n    }\n    \n    /**\n     * 创建配置目录\n     */\n    private static void createConfigDirectories() throws IOException {\n        String[] directories = {\n            \"production/config\",\n            \"production/scripts\",\n            \"production/docker\",\n            \"production/monitoring\",\n            \"production/logs\"\n        };\n        \n        for (String dir : directories) {\n            Path path = Paths.get(dir);\n            if (!Files.exists(path)) {\n                Files.createDirectories(path);\n                logger.info(\"Created directory: {}\", path.toAbsolutePath());\n            }\n        }\n    }\n    \n    /**\n     * 生成服务端配置\n     */\n    private static void generateServerConfigs() throws IOException {\n        // 生产环境服务端配置\n        Properties prodServerConfig = new Properties();\n        prodServerConfig.setProperty(\"server.port\", \"8080\");\n        prodServerConfig.setProperty(\"server.boss.threads\", \"1\");\n        prodServerConfig.setProperty(\"server.worker.threads\", \"16\");\n        prodServerConfig.setProperty(\"server.max.connections\", \"5000\");\n        prodServerConfig.setProperty(\"server.backlog\", \"2048\");\n        prodServerConfig.setProperty(\"server.tcp.nodelay\", \"true\");\n        prodServerConfig.setProperty(\"server.keepalive\", \"true\");\n        prodServerConfig.setProperty(\"server.reuse.addr\", \"true\");\n        prodServerConfig.setProperty(\"server.recv.buffer.size\", \"131072\");\n        prodServerConfig.setProperty(\"server.send.buffer.size\", \"131072\");\n        prodServerConfig.setProperty(\"server.use.epoll\", \"true\");\n        prodServerConfig.setProperty(\"server.use.pooled.allocator\", \"true\");\n        prodServerConfig.setProperty(\"server.use.direct.memory\", \"true\");\n        prodServerConfig.setProperty(\"server.heartbeat.interval\", \"30000\");\n        prodServerConfig.setProperty(\"server.heartbeat.timeout\", \"10000\");\n        \n        writePropertiesFile(\"production/config/server-prod.properties\", prodServerConfig, \n            \"Production Server Configuration\");\n        \n        // 测试环境服务端配置\n        Properties testServerConfig = new Properties();\n        testServerConfig.setProperty(\"server.port\", \"8081\");\n        testServerConfig.setProperty(\"server.boss.threads\", \"1\");\n        testServerConfig.setProperty(\"server.worker.threads\", \"8\");\n        testServerConfig.setProperty(\"server.max.connections\", \"1000\");\n        testServerConfig.setProperty(\"server.backlog\", \"512\");\n        testServerConfig.setProperty(\"server.tcp.nodelay\", \"true\");\n        testServerConfig.setProperty(\"server.keepalive\", \"true\");\n        testServerConfig.setProperty(\"server.reuse.addr\", \"true\");\n        testServerConfig.setProperty(\"server.recv.buffer.size\", \"65536\");\n        testServerConfig.setProperty(\"server.send.buffer.size\", \"65536\");\n        testServerConfig.setProperty(\"server.use.epoll\", \"false\");\n        testServerConfig.setProperty(\"server.use.pooled.allocator\", \"false\");\n        testServerConfig.setProperty(\"server.use.direct.memory\", \"false\");\n        testServerConfig.setProperty(\"server.heartbeat.interval\", \"15000\");\n        testServerConfig.setProperty(\"server.heartbeat.timeout\", \"5000\");\n        \n        writePropertiesFile(\"production/config/server-test.properties\", testServerConfig, \n            \"Test Server Configuration\");\n    }\n    \n    /**\n     * 生成客户端配置\n     */\n    private static void generateClientConfigs() throws IOException {\n        // 生产环境客户端配置\n        Properties prodClientConfig = new Properties();\n        prodClientConfig.setProperty(\"client.connect.timeout\", \"3000\");\n        prodClientConfig.setProperty(\"client.request.timeout\", \"30000\");\n        prodClientConfig.setProperty(\"client.io.threads\", \"8\");\n        prodClientConfig.setProperty(\"client.max.pool.size\", \"50\");\n        prodClientConfig.setProperty(\"client.min.pool.size\", \"5\");\n        prodClientConfig.setProperty(\"client.tcp.nodelay\", \"true\");\n        prodClientConfig.setProperty(\"client.keepalive\", \"true\");\n        prodClientConfig.setProperty(\"client.recv.buffer.size\", \"131072\");\n        prodClientConfig.setProperty(\"client.send.buffer.size\", \"131072\");\n        prodClientConfig.setProperty(\"client.use.epoll\", \"true\");\n        prodClientConfig.setProperty(\"client.use.pooled.allocator\", \"true\");\n        prodClientConfig.setProperty(\"client.use.direct.memory\", \"true\");\n        prodClientConfig.setProperty(\"client.max.retries\", \"3\");\n        prodClientConfig.setProperty(\"client.retry.interval\", \"1000\");\n        prodClientConfig.setProperty(\"client.heartbeat.interval\", \"30000\");\n        \n        writePropertiesFile(\"production/config/client-prod.properties\", prodClientConfig, \n            \"Production Client Configuration\");\n        \n        // 测试环境客户端配置\n        Properties testClientConfig = new Properties();\n        testClientConfig.setProperty(\"client.connect.timeout\", \"5000\");\n        testClientConfig.setProperty(\"client.request.timeout\", \"10000\");\n        testClientConfig.setProperty(\"client.io.threads\", \"4\");\n        testClientConfig.setProperty(\"client.max.pool.size\", \"10\");\n        testClientConfig.setProperty(\"client.min.pool.size\", \"2\");\n        testClientConfig.setProperty(\"client.tcp.nodelay\", \"true\");\n        testClientConfig.setProperty(\"client.keepalive\", \"true\");\n        testClientConfig.setProperty(\"client.recv.buffer.size\", \"65536\");\n        testClientConfig.setProperty(\"client.send.buffer.size\", \"65536\");\n        testClientConfig.setProperty(\"client.use.epoll\", \"false\");\n        testClientConfig.setProperty(\"client.use.pooled.allocator\", \"false\");\n        testClientConfig.setProperty(\"client.use.direct.memory\", \"false\");\n        testClientConfig.setProperty(\"client.max.retries\", \"2\");\n        testClientConfig.setProperty(\"client.retry.interval\", \"500\");\n        testClientConfig.setProperty(\"client.heartbeat.interval\", \"15000\");\n        \n        writePropertiesFile(\"production/config/client-test.properties\", testClientConfig, \n            \"Test Client Configuration\");\n    }\n    \n    /**\n     * 生成部署脚本\n     */\n    private static void generateDeploymentScripts() throws IOException {\n        // 服务端启动脚本\n        String serverScript = generateServerStartScript();\n        writeFile(\"production/scripts/start-server.sh\", serverScript);\n        \n        // 客户端启动脚本\n        String clientScript = generateClientStartScript();\n        writeFile(\"production/scripts/start-client.sh\", clientScript);\n        \n        // 停止脚本\n        String stopScript = generateStopScript();\n        writeFile(\"production/scripts/stop-services.sh\", stopScript);\n        \n        // 健康检查脚本\n        String healthCheckScript = generateHealthCheckScript();\n        writeFile(\"production/scripts/health-check.sh\", healthCheckScript);\n        \n        // 部署脚本\n        String deployScript = generateDeployScript();\n        writeFile(\"production/scripts/deploy.sh\", deployScript);\n        \n        logger.info(\"Generated deployment scripts\");\n    }\n    \n    /**\n     * 生成服务端启动脚本\n     */\n    private static String generateServerStartScript() {\n        return \"#!/bin/bash\\n\" +\n                \"\\n\" +\n                \"# RPC Server Startup Script\\n\" +\n                \"# Production Environment\\n\" +\n                \"\\n\" +\n                \"set -e\\n\" +\n                \"\\n\" +\n                \"SCRIPT_DIR=\\\"$(cd \\\"$(dirname \\\"${BASH_SOURCE[0]}\\\")\\\" && pwd)\\\"\\n\" +\n                \"PROJECT_ROOT=\\\"$(dirname \\\"$SCRIPT_DIR\\\")\\\"\\n\" +\n                \"\\n\" +\n                \"# Configuration\\n\" +\n                \"APP_NAME=\\\"rpc-server\\\"\\n\" +\n                \"JAR_FILE=\\\"$PROJECT_ROOT/lib/rpc-framework-server.jar\\\"\\n\" +\n                \"CONFIG_FILE=\\\"$PROJECT_ROOT/config/server-prod.properties\\\"\\n\" +\n                \"LOG_DIR=\\\"$PROJECT_ROOT/logs\\\"\\n\" +\n                \"PID_FILE=\\\"$PROJECT_ROOT/run/$APP_NAME.pid\\\"\\n\" +\n                \"\\n\" +\n                \"# JVM Options\\n\" +\n                \"JVM_OPTS=\\\"-server\\n\" +\n                \"JVM_OPTS+=\\\" -Xmx4g -Xms4g\\\"\\n\" +\n                \"JVM_OPTS+=\\\" -XX:+UseG1GC\\\"\\n\" +\n                \"JVM_OPTS+=\\\" -XX:MaxGCPauseMillis=20\\\"\\n\" +\n                \"JVM_OPTS+=\\\" -XX:+UseCompressedOops\\\"\\n\" +\n                \"JVM_OPTS+=\\\" -XX:+DisableExplicitGC\\\"\\n\" +\n                \"JVM_OPTS+=\\\" -Djava.awt.headless=true\\\"\\n\" +\n                \"JVM_OPTS+=\\\" -Dfile.encoding=UTF-8\\\"\\n\" +\n                \"JVM_OPTS+=\\\" -Djava.security.egd=file:/dev/./urandom\\\"\\n\" +\n                \"JVM_OPTS+=\\\" -Dcom.sun.management.jmxremote\\\"\\n\" +\n                \"JVM_OPTS+=\\\" -Dcom.sun.management.jmxremote.port=9999\\\"\\n\" +\n                \"JVM_OPTS+=\\\" -Dcom.sun.management.jmxremote.authenticate=false\\\"\\n\" +\n                \"JVM_OPTS+=\\\" -Dcom.sun.management.jmxremote.ssl=false\\\"\\n\" +\n                \"\\n\" +\n                \"# Create necessary directories\\n\" +\n                \"mkdir -p \\\"$LOG_DIR\\\"\\n\" +\n                \"mkdir -p \\\"$(dirname \\\"$PID_FILE\\\")\\\"\\n\" +\n                \"\\n\" +\n                \"# Check if already running\\n\" +\n                \"if [ -f \\\"$PID_FILE\\\" ] && kill -0 \\\"$(cat \\\"$PID_FILE\\\")\\\" 2>/dev/null; then\\n\" +\n                \"    echo \\\"$APP_NAME is already running (PID: $(cat \\\"$PID_FILE\\\"))\\\"\\n\" +\n                \"    exit 1\\n\" +\n                \"fi\\n\" +\n                \"\\n\" +\n                \"# Start the server\\n\" +\n                \"echo \\\"Starting $APP_NAME...\\\"\\n\" +\n                \"nohup java $JVM_OPTS \\\\\\n\" +\n                \"    -cp \\\"$JAR_FILE\\\" \\\\\\n\" +\n                \"    -Dconfig.file=\\\"$CONFIG_FILE\\\" \\\\\\n\" +\n                \"    -Dlog.dir=\\\"$LOG_DIR\\\" \\\\\\n\" +\n                \"    com.rpcframework.examples.server.RpcServerExample \\\\\\n\" +\n                \"    > \\\"$LOG_DIR/server.out\\\" 2>&1 &\\n\" +\n                \"\\n\" +\n                \"# Save PID\\n\" +\n                \"echo $! > \\\"$PID_FILE\\\"\\n\" +\n                \"\\n\" +\n                \"# Wait for startup\\n\" +\n                \"sleep 3\\n\" +\n                \"\\n\" +\n                \"# Check if started successfully\\n\" +\n                \"if kill -0 \\\"$(cat \\\"$PID_FILE\\\")\\\" 2>/dev/null; then\\n\" +\n                \"    echo \\\"$APP_NAME started successfully (PID: $(cat \\\"$PID_FILE\\\"))\\\"\\n\" +\n                \"else\\n\" +\n                \"    echo \\\"Failed to start $APP_NAME\\\"\\n\" +\n                \"    rm -f \\\"$PID_FILE\\\"\\n\" +\n                \"    exit 1\\n\" +\n                \"fi\\n\";\n    }\n    \n    /**\n     * 生成客户端启动脚本\n     */\n    private static String generateClientStartScript() {\n        return \"#!/bin/bash\\n\" +\n                \"\\n\" +\n                \"# RPC Client Startup Script\\n\" +\n                \"\\n\" +\n                \"set -e\\n\" +\n                \"\\n\" +\n                \"SCRIPT_DIR=\\\"$(cd \\\"$(dirname \\\"${BASH_SOURCE[0]}\\\")\\\" && pwd)\\\"\\n\" +\n                \"PROJECT_ROOT=\\\"$(dirname \\\"$SCRIPT_DIR\\\")\\\"\\n\" +\n                \"\\n\" +\n                \"# Configuration\\n\" +\n                \"JAR_FILE=\\\"$PROJECT_ROOT/lib/rpc-framework-client.jar\\\"\\n\" +\n                \"CONFIG_FILE=\\\"$PROJECT_ROOT/config/client-prod.properties\\\"\\n\" +\n                \"LOG_DIR=\\\"$PROJECT_ROOT/logs\\\"\\n\" +\n                \"\\n\" +\n                \"# JVM Options\\n\" +\n                \"JVM_OPTS=\\\"-client\\n\" +\n                \"JVM_OPTS+=\\\" -Xmx1g -Xms1g\\\"\\n\" +\n                \"JVM_OPTS+=\\\" -XX:+UseG1GC\\\"\\n\" +\n                \"JVM_OPTS+=\\\" -XX:+UseCompressedOops\\\"\\n\" +\n                \"JVM_OPTS+=\\\" -Djava.awt.headless=true\\\"\\n\" +\n                \"JVM_OPTS+=\\\" -Dfile.encoding=UTF-8\\\"\\n\" +\n                \"\\n\" +\n                \"# Create log directory\\n\" +\n                \"mkdir -p \\\"$LOG_DIR\\\"\\n\" +\n                \"\\n\" +\n                \"# Run client example\\n\" +\n                \"echo \\\"Running RPC client example...\\\"\\n\" +\n                \"java $JVM_OPTS \\\\\\n\" +\n                \"    -cp \\\"$JAR_FILE\\\" \\\\\\n\" +\n                \"    -Dconfig.file=\\\"$CONFIG_FILE\\\" \\\\\\n\" +\n                \"    -Dlog.dir=\\\"$LOG_DIR\\\" \\\\\\n\" +\n                \"    com.rpcframework.examples.client.RpcClientExample\\n\";\n    }\n    \n    /**\n     * 生成停止脚本\n     */\n    private static String generateStopScript() {\n        return \"#!/bin/bash\\n\" +\n                \"\\n\" +\n                \"# Stop RPC Services Script\\n\" +\n                \"\\n\" +\n                \"SCRIPT_DIR=\\\"$(cd \\\"$(dirname \\\"${BASH_SOURCE[0]}\\\")\\\" && pwd)\\\"\\n\" +\n                \"PROJECT_ROOT=\\\"$(dirname \\\"$SCRIPT_DIR\\\")\\\"\\n\" +\n                \"\\n\" +\n                \"PID_DIR=\\\"$PROJECT_ROOT/run\\\"\\n\" +\n                \"\\n\" +\n                \"# Stop server\\n\" +\n                \"SERVER_PID_FILE=\\\"$PID_DIR/rpc-server.pid\\\"\\n\" +\n                \"if [ -f \\\"$SERVER_PID_FILE\\\" ]; then\\n\" +\n                \"    PID=$(cat \\\"$SERVER_PID_FILE\\\")\\n\" +\n                \"    if kill -0 \\\"$PID\\\" 2>/dev/null; then\\n\" +\n                \"        echo \\\"Stopping RPC server (PID: $PID)...\\\"\\n\" +\n                \"        kill \\\"$PID\\\"\\n\" +\n                \"        \\n\" +\n                \"        # Wait for graceful shutdown\\n\" +\n                \"        for i in {1..30}; do\\n\" +\n                \"            if ! kill -0 \\\"$PID\\\" 2>/dev/null; then\\n\" +\n                \"                echo \\\"RPC server stopped gracefully\\\"\\n\" +\n                \"                break\\n\" +\n                \"            fi\\n\" +\n                \"            sleep 1\\n\" +\n                \"        done\\n\" +\n                \"        \\n\" +\n                \"        # Force kill if still running\\n\" +\n                \"        if kill -0 \\\"$PID\\\" 2>/dev/null; then\\n\" +\n                \"            echo \\\"Force killing RPC server...\\\"\\n\" +\n                \"            kill -9 \\\"$PID\\\"\\n\" +\n                \"        fi\\n\" +\n                \"    fi\\n\" +\n                \"    rm -f \\\"$SERVER_PID_FILE\\\"\\n\" +\n                \"else\\n\" +\n                \"    echo \\\"RPC server PID file not found\\\"\\n\" +\n                \"fi\\n\" +\n                \"\\n\" +\n                \"echo \\\"All services stopped\\\"\\n\";\n    }\n    \n    /**\n     * 生成健康检查脚本\n     */\n    private static String generateHealthCheckScript() {\n        return \"#!/bin/bash\\n\" +\n                \"\\n\" +\n                \"# RPC Service Health Check Script\\n\" +\n                \"\\n\" +\n                \"SCRIPT_DIR=\\\"$(cd \\\"$(dirname \\\"${BASH_SOURCE[0]}\\\")\\\" && pwd)\\\"\\n\" +\n                \"PROJECT_ROOT=\\\"$(dirname \\\"$SCRIPT_DIR\\\")\\\"\\n\" +\n                \"\\n\" +\n                \"SERVER_HOST=\\\"localhost\\\"\\n\" +\n                \"SERVER_PORT=8080\\n\" +\n                \"TIMEOUT=5\\n\" +\n                \"\\n\" +\n                \"# Function to check port\\n\" +\n                \"check_port() {\\n\" +\n                \"    local host=$1\\n\" +\n                \"    local port=$2\\n\" +\n                \"    local timeout=$3\\n\" +\n                \"    \\n\" +\n                \"    if timeout $timeout bash -c \\\"</dev/tcp/$host/$port\\\"; then\\n\" +\n                \"        return 0\\n\" +\n                \"    else\\n\" +\n                \"        return 1\\n\" +\n                \"    fi\\n\" +\n                \"}\\n\" +\n                \"\\n\" +\n                \"# Check server process\\n\" +\n                \"SERVER_PID_FILE=\\\"$PROJECT_ROOT/run/rpc-server.pid\\\"\\n\" +\n                \"if [ -f \\\"$SERVER_PID_FILE\\\" ]; then\\n\" +\n                \"    PID=$(cat \\\"$SERVER_PID_FILE\\\")\\n\" +\n                \"    if kill -0 \\\"$PID\\\" 2>/dev/null; then\\n\" +\n                \"        echo \\\"✅ RPC Server process is running (PID: $PID)\\\"\\n\" +\n                \"    else\\n\" +\n                \"        echo \\\"❌ RPC Server process is not running\\\"\\n\" +\n                \"        exit 1\\n\" +\n                \"    fi\\n\" +\n                \"else\\n\" +\n                \"    echo \\\"❌ RPC Server PID file not found\\\"\\n\" +\n                \"    exit 1\\n\" +\n                \"fi\\n\" +\n                \"\\n\" +\n                \"# Check server port\\n\" +\n                \"if check_port $SERVER_HOST $SERVER_PORT $TIMEOUT; then\\n\" +\n                \"    echo \\\"✅ RPC Server port $SERVER_PORT is accessible\\\"\\n\" +\n                \"else\\n\" +\n                \"    echo \\\"❌ RPC Server port $SERVER_PORT is not accessible\\\"\\n\" +\n                \"    exit 1\\n\" +\n                \"fi\\n\" +\n                \"\\n\" +\n                \"# Check JMX port (if enabled)\\n\" +\n                \"JMX_PORT=9999\\n\" +\n                \"if check_port $SERVER_HOST $JMX_PORT 2; then\\n\" +\n                \"    echo \\\"✅ JMX monitoring port $JMX_PORT is accessible\\\"\\n\" +\n                \"else\\n\" +\n                \"    echo \\\"⚠️ JMX monitoring port $JMX_PORT is not accessible\\\"\\n\" +\n                \"fi\\n\" +\n                \"\\n\" +\n                \"echo \\\"✅ All health checks passed\\\"\\n\";\n    }\n    \n    /**\n     * 生成部署脚本\n     */\n    private static String generateDeployScript() {\n        return \"#!/bin/bash\\n\" +\n                \"\\n\" +\n                \"# RPC Framework Deployment Script\\n\" +\n                \"\\n\" +\n                \"set -e\\n\" +\n                \"\\n\" +\n                \"SCRIPT_DIR=\\\"$(cd \\\"$(dirname \\\"${BASH_SOURCE[0]}\\\")\\\" && pwd)\\\"\\n\" +\n                \"PROJECT_ROOT=\\\"$(dirname \\\"$SCRIPT_DIR\\\")\\\"\\n\" +\n                \"\\n\" +\n                \"# Configuration\\n\" +\n                \"ENVIRONMENT=${1:-prod}\\n\" +\n                \"VERSION=${2:-latest}\\n\" +\n                \"\\n\" +\n                \"echo \\\"Deploying RPC Framework to $ENVIRONMENT environment (version: $VERSION)\\\"\\n\" +\n                \"\\n\" +\n                \"# Create deployment directories\\n\" +\n                \"mkdir -p \\\"$PROJECT_ROOT/lib\\\"\\n\" +\n                \"mkdir -p \\\"$PROJECT_ROOT/run\\\"\\n\" +\n                \"mkdir -p \\\"$PROJECT_ROOT/logs\\\"\\n\" +\n                \"mkdir -p \\\"$PROJECT_ROOT/backup\\\"\\n\" +\n                \"\\n\" +\n                \"# Backup current deployment (if exists)\\n\" +\n                \"if [ -f \\\"$PROJECT_ROOT/lib/rpc-framework-server.jar\\\" ]; then\\n\" +\n                \"    BACKUP_DIR=\\\"$PROJECT_ROOT/backup/$(date +%Y%m%d_%H%M%S)\\\"\\n\" +\n                \"    mkdir -p \\\"$BACKUP_DIR\\\"\\n\" +\n                \"    cp -r \\\"$PROJECT_ROOT/lib\\\" \\\"$BACKUP_DIR/\\\"\\n\" +\n                \"    echo \\\"Created backup at $BACKUP_DIR\\\"\\n\" +\n                \"fi\\n\" +\n                \"\\n\" +\n                \"# Stop existing services\\n\" +\n                \"echo \\\"Stopping existing services...\\\"\\n\" +\n                \"$SCRIPT_DIR/stop-services.sh || true\\n\" +\n                \"\\n\" +\n                \"# Deploy new artifacts\\n\" +\n                \"echo \\\"Deploying new artifacts...\\\"\\n\" +\n                \"# TODO: Copy JAR files from build/repository\\n\" +\n                \"# cp /path/to/artifacts/*.jar \\\"$PROJECT_ROOT/lib/\\\"\\n\" +\n                \"\\n\" +\n                \"# Update configuration\\n\" +\n                \"if [ \\\"$ENVIRONMENT\\\" = \\\"prod\\\" ]; then\\n\" +\n                \"    cp \\\"$PROJECT_ROOT/config/server-prod.properties\\\" \\\"$PROJECT_ROOT/config/server.properties\\\"\\n\" +\n                \"    cp \\\"$PROJECT_ROOT/config/client-prod.properties\\\" \\\"$PROJECT_ROOT/config/client.properties\\\"\\n\" +\n                \"elif [ \\\"$ENVIRONMENT\\\" = \\\"test\\\" ]; then\\n\" +\n                \"    cp \\\"$PROJECT_ROOT/config/server-test.properties\\\" \\\"$PROJECT_ROOT/config/server.properties\\\"\\n\" +\n                \"    cp \\\"$PROJECT_ROOT/config/client-test.properties\\\" \\\"$PROJECT_ROOT/config/client.properties\\\"\\n\" +\n                \"fi\\n\" +\n                \"\\n\" +\n                \"# Start services\\n\" +\n                \"echo \\\"Starting services...\\\"\\n\" +\n                \"$SCRIPT_DIR/start-server.sh\\n\" +\n                \"\\n\" +\n                \"# Health check\\n\" +\n                \"echo \\\"Performing health check...\\\"\\n\" +\n                \"sleep 5\\n\" +\n                \"$SCRIPT_DIR/health-check.sh\\n\" +\n                \"\\n\" +\n                \"echo \\\"✅ Deployment completed successfully!\\\"\\n\";\n    }\n    \n    /**\n     * 生成监控配置\n     */\n    private static void generateMonitoringConfigs() throws IOException {\n        // Prometheus配置\n        String prometheusConfig = generatePrometheusConfig();\n        writeFile(\"production/monitoring/prometheus.yml\", prometheusConfig);\n        \n        // Grafana配置\n        String grafanaConfig = generateGrafanaConfig();\n        writeFile(\"production/monitoring/grafana-dashboard.json\", grafanaConfig);\n        \n        // JVM监控脚本\n        String jvmMonitorScript = generateJvmMonitorScript();\n        writeFile(\"production/monitoring/jvm-monitor.sh\", jvmMonitorScript);\n        \n        logger.info(\"Generated monitoring configurations\");\n    }\n    \n    /**\n     * 生成Prometheus配置\n     */\n    private static String generatePrometheusConfig() {\n        return \"global:\\n\" +\n                \"  scrape_interval: 15s\\n\" +\n                \"  evaluation_interval: 15s\\n\" +\n                \"\\n\" +\n                \"rule_files:\\n\" +\n                \"  # - \\\"first_rules.yml\\\"\\n\" +\n                \"  # - \\\"second_rules.yml\\\"\\n\" +\n                \"\\n\" +\n                \"scrape_configs:\\n\" +\n                \"  - job_name: 'rpc-server'\\n\" +\n                \"    static_configs:\\n\" +\n                \"      - targets: ['localhost:9090']\\n\" +\n                \"    metrics_path: '/metrics'\\n\" +\n                \"    scrape_interval: 10s\\n\" +\n                \"    \\n\" +\n                \"  - job_name: 'jvm-metrics'\\n\" +\n                \"    static_configs:\\n\" +\n                \"      - targets: ['localhost:9999']\\n\" +\n                \"    metrics_path: '/metrics'\\n\" +\n                \"    scrape_interval: 15s\\n\" +\n                \"\\n\" +\n                \"  - job_name: 'node-exporter'\\n\" +\n                \"    static_configs:\\n\" +\n                \"      - targets: ['localhost:9100']\\n\";\n    }\n    \n    /**\n     * 生成Grafana配置\n     */\n    private static String generateGrafanaConfig() {\n        return \"{\\n\" +\n                \"  \\\"dashboard\\\": {\\n\" +\n                \"    \\\"id\\\": null,\\n\" +\n                \"    \\\"title\\\": \\\"RPC Framework Monitoring\\\",\\n\" +\n                \"    \\\"tags\\\": [\\\"rpc\\\", \\\"performance\\\"],\\n\" +\n                \"    \\\"style\\\": \\\"dark\\\",\\n\" +\n                \"    \\\"timezone\\\": \\\"browser\\\",\\n\" +\n                \"    \\\"panels\\\": [\\n\" +\n                \"      {\\n\" +\n                \"        \\\"title\\\": \\\"QPS (Queries Per Second)\\\",\\n\" +\n                \"        \\\"type\\\": \\\"graph\\\",\\n\" +\n                \"        \\\"targets\\\": [\\n\" +\n                \"          {\\n\" +\n                \"            \\\"expr\\\": \\\"rate(rpc_requests_total[1m])\\\",\\n\" +\n                \"            \\\"legendFormat\\\": \\\"QPS\\\"\\n\" +\n                \"          }\\n\" +\n                \"        ]\\n\" +\n                \"      },\\n\" +\n                \"      {\\n\" +\n                \"        \\\"title\\\": \\\"Response Time\\\",\\n\" +\n                \"        \\\"type\\\": \\\"graph\\\",\\n\" +\n                \"        \\\"targets\\\": [\\n\" +\n                \"          {\\n\" +\n                \"            \\\"expr\\\": \\\"histogram_quantile(0.50, rate(rpc_request_duration_seconds_bucket[5m]))\\\",\\n\" +\n                \"            \\\"legendFormat\\\": \\\"P50\\\"\\n\" +\n                \"          },\\n\" +\n                \"          {\\n\" +\n                \"            \\\"expr\\\": \\\"histogram_quantile(0.99, rate(rpc_request_duration_seconds_bucket[5m]))\\\",\\n\" +\n                \"            \\\"legendFormat\\\": \\\"P99\\\"\\n\" +\n                \"          }\\n\" +\n                \"        ]\\n\" +\n                \"      },\\n\" +\n                \"      {\\n\" +\n                \"        \\\"title\\\": \\\"JVM Memory Usage\\\",\\n\" +\n                \"        \\\"type\\\": \\\"graph\\\",\\n\" +\n                \"        \\\"targets\\\": [\\n\" +\n                \"          {\\n\" +\n                \"            \\\"expr\\\": \\\"jvm_memory_used_bytes{area=\\\\\\\"heap\\\\\\\"}\\\",\\n\" +\n                \"            \\\"legendFormat\\\": \\\"Heap Used\\\"\\n\" +\n                \"          },\\n\" +\n                \"          {\\n\" +\n                \"            \\\"expr\\\": \\\"jvm_memory_max_bytes{area=\\\\\\\"heap\\\\\\\"}\\\",\\n\" +\n                \"            \\\"legendFormat\\\": \\\"Heap Max\\\"\\n\" +\n                \"          }\\n\" +\n                \"        ]\\n\" +\n                \"      }\\n\" +\n                \"    ],\\n\" +\n                \"    \\\"time\\\": {\\n\" +\n                \"      \\\"from\\\": \\\"now-1h\\\",\\n\" +\n                \"      \\\"to\\\": \\\"now\\\"\\n\" +\n                \"    },\\n\" +\n                \"    \\\"refresh\\\": \\\"5s\\\"\\n\" +\n                \"  }\\n\" +\n                \"}\";\n    }\n    \n    /**\n     * 生成JVM监控脚本\n     */\n    private static String generateJvmMonitorScript() {\n        return \"#!/bin/bash\\n\" +\n                \"\\n\" +\n                \"# JVM Monitoring Script\\n\" +\n                \"\\n\" +\n                \"SCRIPT_DIR=\\\"$(cd \\\"$(dirname \\\"${BASH_SOURCE[0]}\\\")\\\" && pwd)\\\"\\n\" +\n                \"PROJECT_ROOT=\\\"$(dirname \\\"$SCRIPT_DIR\\\")\\\"\\n\" +\n                \"\\n\" +\n                \"PID_FILE=\\\"$PROJECT_ROOT/run/rpc-server.pid\\\"\\n\" +\n                \"\\n\" +\n                \"if [ ! -f \\\"$PID_FILE\\\" ]; then\\n\" +\n                \"    echo \\\"PID file not found: $PID_FILE\\\"\\n\" +\n                \"    exit 1\\n\" +\n                \"fi\\n\" +\n                \"\\n\" +\n                \"PID=$(cat \\\"$PID_FILE\\\")\\n\" +\n                \"\\n\" +\n                \"if ! kill -0 \\\"$PID\\\" 2>/dev/null; then\\n\" +\n                \"    echo \\\"Process not running: $PID\\\"\\n\" +\n                \"    exit 1\\n\" +\n                \"fi\\n\" +\n                \"\\n\" +\n                \"echo \\\"=== JVM Monitoring Report (PID: $PID) ===\\\"\\n\" +\n                \"echo \\\"Time: $(date)\\\"\\n\" +\n                \"echo\\n\" +\n                \"\\n\" +\n                \"# Memory usage\\n\" +\n                \"echo \\\"Memory Usage:\\\"\\n\" +\n                \"jstat -gc \\\"$PID\\\" | tail -1 | awk '{\\n\" +\n                \"    printf \\\"  Eden: %.1f MB\\\\n\\\", $6/1024\\n\" +\n                \"    printf \\\"  Survivor: %.1f MB\\\\n\\\", ($7+$8)/1024\\n\" +\n                \"    printf \\\"  Old Gen: %.1f MB\\\\n\\\", $9/1024\\n\" +\n                \"    printf \\\"  Metaspace: %.1f MB\\\\n\\\", $10/1024\\n\" +\n                \"}'\\n\" +\n                \"echo\\n\" +\n                \"\\n\" +\n                \"# GC statistics\\n\" +\n                \"echo \\\"GC Statistics:\\\"\\n\" +\n                \"jstat -gc \\\"$PID\\\" | tail -1 | awk '{\\n\" +\n                \"    printf \\\"  Young GC: %d times, %.3f sec\\\\n\\\", $11, $12\\n\" +\n                \"    printf \\\"  Full GC: %d times, %.3f sec\\\\n\\\", $13, $14\\n\" +\n                \"    printf \\\"  Total GC Time: %.3f sec\\\\n\\\", $12+$14\\n\" +\n                \"}'\\n\" +\n                \"echo\\n\" +\n                \"\\n\" +\n                \"# Thread count\\n\" +\n                \"echo \\\"Thread Count:\\\"\\n\" +\n                \"THREAD_COUNT=$(jstack \\\"$PID\\\" 2>/dev/null | grep -c \\\"^\\\\\\\".*\\\\\\\" \\\" || echo \\\"N/A\\\")\\n\" +\n                \"echo \\\"  Active Threads: $THREAD_COUNT\\\"\\n\" +\n                \"echo\\n\" +\n                \"\\n\" +\n                \"# CPU usage\\n\" +\n                \"echo \\\"CPU Usage:\\\"\\n\" +\n                \"top -p \\\"$PID\\\" -n 1 -b | tail -1 | awk '{printf \\\"  CPU: %s\\\\n\\\", $9}'\\n\" +\n                \"echo\\n\" +\n                \"\\n\" +\n                \"echo \\\"=== End of Report ===\\\"\\n\";\n    }\n    \n    /**\n     * 生成日志配置\n     */\n    private static void generateLoggingConfigs() throws IOException {\n        // Logback配置\n        String logbackConfig = generateLogbackConfig();\n        writeFile(\"production/config/logback-spring.xml\", logbackConfig);\n        \n        // 日志轮转脚本\n        String logRotateScript = generateLogRotateScript();\n        writeFile(\"production/scripts/rotate-logs.sh\", logRotateScript);\n        \n        logger.info(\"Generated logging configurations\");\n    }\n    \n    /**\n     * 生成Logback配置\n     */\n    private static String generateLogbackConfig() {\n        return \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n                \"<configuration scan=\\\"true\\\" scanPeriod=\\\"30 seconds\\\">\\n\" +\n                \"\\n\" +\n                \"    <!-- Properties -->\\n\" +\n                \"    <property name=\\\"LOG_DIR\\\" value=\\\"${log.dir:-./logs}\\\" />\\n\" +\n                \"    <property name=\\\"APP_NAME\\\" value=\\\"rpc-framework\\\" />\\n\" +\n                \"\\n\" +\n                \"    <!-- Console Appender -->\\n\" +\n                \"    <appender name=\\\"CONSOLE\\\" class=\\\"ch.qos.logback.core.ConsoleAppender\\\">\\n\" +\n                \"        <encoder>\\n\" +\n                \"            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\\n\" +\n                \"        </encoder>\\n\" +\n                \"    </appender>\\n\" +\n                \"\\n\" +\n                \"    <!-- File Appender for All Logs -->\\n\" +\n                \"    <appender name=\\\"FILE\\\" class=\\\"ch.qos.logback.core.rolling.RollingFileAppender\\\">\\n\" +\n                \"        <file>${LOG_DIR}/${APP_NAME}.log</file>\\n\" +\n                \"        <rollingPolicy class=\\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\\">\\n\" +\n                \"            <fileNamePattern>${LOG_DIR}/${APP_NAME}-%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>\\n\" +\n                \"            <timeBasedFileNamingAndTriggeringPolicy class=\\\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\\\">\\n\" +\n                \"                <maxFileSize>100MB</maxFileSize>\\n\" +\n                \"            </timeBasedFileNamingAndTriggeringPolicy>\\n\" +\n                \"            <maxHistory>30</maxHistory>\\n\" +\n                \"            <totalSizeCap>3GB</totalSizeCap>\\n\" +\n                \"        </rollingPolicy>\\n\" +\n                \"        <encoder>\\n\" +\n                \"            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\\n\" +\n                \"        </encoder>\\n\" +\n                \"    </appender>\\n\" +\n                \"\\n\" +\n                \"    <!-- Error Log Appender -->\\n\" +\n                \"    <appender name=\\\"ERROR_FILE\\\" class=\\\"ch.qos.logback.core.rolling.RollingFileAppender\\\">\\n\" +\n                \"        <file>${LOG_DIR}/${APP_NAME}-error.log</file>\\n\" +\n                \"        <filter class=\\\"ch.qos.logback.classic.filter.LevelFilter\\\">\\n\" +\n                \"            <level>ERROR</level>\\n\" +\n                \"            <onMatch>ACCEPT</onMatch>\\n\" +\n                \"            <onMismatch>DENY</onMismatch>\\n\" +\n                \"        </filter>\\n\" +\n                \"        <rollingPolicy class=\\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\\">\\n\" +\n                \"            <fileNamePattern>${LOG_DIR}/${APP_NAME}-error-%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>\\n\" +\n                \"            <timeBasedFileNamingAndTriggeringPolicy class=\\\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\\\">\\n\" +\n                \"                <maxFileSize>50MB</maxFileSize>\\n\" +\n                \"            </timeBasedFileNamingAndTriggeringPolicy>\\n\" +\n                \"            <maxHistory>90</maxHistory>\\n\" +\n                \"        </rollingPolicy>\\n\" +\n                \"        <encoder>\\n\" +\n                \"            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\\n\" +\n                \"        </encoder>\\n\" +\n                \"    </appender>\\n\" +\n                \"\\n\" +\n                \"    <!-- Performance Log Appender -->\\n\" +\n                \"    <appender name=\\\"PERF_FILE\\\" class=\\\"ch.qos.logback.core.rolling.RollingFileAppender\\\">\\n\" +\n                \"        <file>${LOG_DIR}/${APP_NAME}-performance.log</file>\\n\" +\n                \"        <rollingPolicy class=\\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\\">\\n\" +\n                \"            <fileNamePattern>${LOG_DIR}/${APP_NAME}-performance-%d{yyyy-MM-dd}.log.gz</fileNamePattern>\\n\" +\n                \"            <maxHistory>7</maxHistory>\\n\" +\n                \"        </rollingPolicy>\\n\" +\n                \"        <encoder>\\n\" +\n                \"            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} - %msg%n</pattern>\\n\" +\n                \"        </encoder>\\n\" +\n                \"    </appender>\\n\" +\n                \"\\n\" +\n                \"    <!-- Loggers -->\\n\" +\n                \"    <logger name=\\\"com.rpcframework\\\" level=\\\"INFO\\\" additivity=\\\"false\\\">\\n\" +\n                \"        <appender-ref ref=\\\"CONSOLE\\\" />\\n\" +\n                \"        <appender-ref ref=\\\"FILE\\\" />\\n\" +\n                \"        <appender-ref ref=\\\"ERROR_FILE\\\" />\\n\" +\n                \"    </logger>\\n\" +\n                \"\\n\" +\n                \"    <logger name=\\\"performance\\\" level=\\\"INFO\\\" additivity=\\\"false\\\">\\n\" +\n                \"        <appender-ref ref=\\\"PERF_FILE\\\" />\\n\" +\n                \"    </logger>\\n\" +\n                \"\\n\" +\n                \"    <!-- Root Logger -->\\n\" +\n                \"    <root level=\\\"WARN\\\">\\n\" +\n                \"        <appender-ref ref=\\\"CONSOLE\\\" />\\n\" +\n                \"        <appender-ref ref=\\\"FILE\\\" />\\n\" +\n                \"    </root>\\n\" +\n                \"\\n\" +\n                \"</configuration>\";\n    }\n    \n    /**\n     * 生成日志轮转脚本\n     */\n    private static String generateLogRotateScript() {\n        return \"#!/bin/bash\\n\" +\n                \"\\n\" +\n                \"# Log Rotation Script\\n\" +\n                \"\\n\" +\n                \"SCRIPT_DIR=\\\"$(cd \\\"$(dirname \\\"${BASH_SOURCE[0]}\\\")\\\" && pwd)\\\"\\n\" +\n                \"PROJECT_ROOT=\\\"$(dirname \\\"$SCRIPT_DIR\\\")\\\"\\n\" +\n                \"LOG_DIR=\\\"$PROJECT_ROOT/logs\\\"\\n\" +\n                \"\\n\" +\n                \"if [ ! -d \\\"$LOG_DIR\\\" ]; then\\n\" +\n                \"    echo \\\"Log directory not found: $LOG_DIR\\\"\\n\" +\n                \"    exit 1\\n\" +\n                \"fi\\n\" +\n                \"\\n\" +\n                \"echo \\\"Rotating logs in $LOG_DIR...\\\"\\n\" +\n                \"\\n\" +\n                \"# Compress logs older than 1 day\\n\" +\n                \"find \\\"$LOG_DIR\\\" -name \\\"*.log\\\" -mtime +1 -exec gzip {} \\\\;\\n\" +\n                \"\\n\" +\n                \"# Remove compressed logs older than 30 days\\n\" +\n                \"find \\\"$LOG_DIR\\\" -name \\\"*.log.gz\\\" -mtime +30 -delete\\n\" +\n                \"\\n\" +\n                \"# Remove empty log files\\n\" +\n                \"find \\\"$LOG_DIR\\\" -name \\\"*.log\\\" -size 0 -delete\\n\" +\n                \"\\n\" +\n                \"echo \\\"Log rotation completed\\\"\\n\";\n    }\n    \n    /**\n     * 生成Docker配置\n     */\n    private static void generateDockerConfigs() throws IOException {\n        // Dockerfile\\n        String dockerfile = generateDockerfile();\n        writeFile(\"production/docker/Dockerfile\", dockerfile);\n        \n        // Docker Compose\\n        String dockerCompose = generateDockerCompose();\n        writeFile(\"production/docker/docker-compose.yml\", dockerCompose);\n        \n        // Docker构建脚本\\n        String dockerBuild = generateDockerBuildScript();\n        writeFile(\"production/docker/build.sh\", dockerBuild);\n        \n        logger.info(\"Generated Docker configurations\");\n    }\n    \n    /**\n     * 生成Dockerfile\\n     */\n    private static String generateDockerfile() {\n        return \"# RPC Framework Docker Image\\n\" +\n                \"FROM openjdk:17-jre-slim\\n\" +\n                \"\\n\" +\n                \"# Metadata\\n\" +\n                \"LABEL maintainer=\\\"rpc-framework-team\\\"\\n\" +\n                \"LABEL version=\\\"1.0.0\\\"\\n\" +\n                \"LABEL description=\\\"High-performance RPC Framework\\\"\\n\" +\n                \"\\n\" +\n                \"# Install required packages\\n\" +\n                \"RUN apt-get update && apt-get install -y \\\\\\n\" +\n                \"    curl \\\\\\n\" +\n                \"    netcat \\\\\\n\" +\n                \"    procps \\\\\\n\" +\n                \"    && rm -rf /var/lib/apt/lists/*\\n\" +\n                \"\\n\" +\n                \"# Create application user\\n\" +\n                \"RUN groupadd -r rpc && useradd -r -g rpc rpc\\n\" +\n                \"\\n\" +\n                \"# Set working directory\\n\" +\n                \"WORKDIR /app\\n\" +\n                \"\\n\" +\n                \"# Copy application files\\n\" +\n                \"COPY lib/ ./lib/\\n\" +\n                \"COPY config/ ./config/\\n\" +\n                \"COPY scripts/ ./scripts/\\n\" +\n                \"\\n\" +\n                \"# Create necessary directories\\n\" +\n                \"RUN mkdir -p logs run && \\\\\\n\" +\n                \"    chown -R rpc:rpc /app && \\\\\\n\" +\n                \"    chmod +x scripts/*.sh\\n\" +\n                \"\\n\" +\n                \"# Switch to application user\\n\" +\n                \"USER rpc\\n\" +\n                \"\\n\" +\n                \"# Expose ports\\n\" +\n                \"EXPOSE 8080 9999\\n\" +\n                \"\\n\" +\n                \"# Health check\\n\" +\n                \"HEALTHCHECK --interval=30s --timeout=5s --start-period=60s --retries=3 \\\\\\n\" +\n                \"    CMD curl -f http://localhost:8080/health || exit 1\\n\" +\n                \"\\n\" +\n                \"# Default command\\n\" +\n                \"CMD [\\\"./scripts/start-server.sh\\\"]\\n\";\n    }\n    \n    /**\n     * 生成Docker Compose配置\n     */\n    private static String generateDockerCompose() {\n        return \"version: '3.8'\\n\" +\n                \"\\n\" +\n                \"services:\\n\" +\n                \"  rpc-server:\\n\" +\n                \"    build:\\n\" +\n                \"      context: .\\n\" +\n                \"      dockerfile: Dockerfile\\n\" +\n                \"    image: rpc-framework:latest\\n\" +\n                \"    container_name: rpc-server\\n\" +\n                \"    ports:\\n\" +\n                \"      - \\\"8080:8080\\\"\\n\" +\n                \"      - \\\"9999:9999\\\"\\n\" +\n                \"    volumes:\\n\" +\n                \"      - ./logs:/app/logs\\n\" +\n                \"      - ./config:/app/config\\n\" +\n                \"    environment:\\n\" +\n                \"      - JAVA_OPTS=-Xmx2g -Xms2g\\n\" +\n                \"      - SERVER_PORT=8080\\n\" +\n                \"      - LOG_LEVEL=INFO\\n\" +\n                \"    networks:\\n\" +\n                \"      - rpc-network\\n\" +\n                \"    restart: unless-stopped\\n\" +\n                \"    depends_on:\\n\" +\n                \"      - prometheus\\n\" +\n                \"      - grafana\\n\" +\n                \"\\n\" +\n                \"  prometheus:\\n\" +\n                \"    image: prom/prometheus:latest\\n\" +\n                \"    container_name: rpc-prometheus\\n\" +\n                \"    ports:\\n\" +\n                \"      - \\\"9090:9090\\\"\\n\" +\n                \"    volumes:\\n\" +\n                \"      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml\\n\" +\n                \"      - prometheus-data:/prometheus\\n\" +\n                \"    command:\\n\" +\n                \"      - '--config.file=/etc/prometheus/prometheus.yml'\\n\" +\n                \"      - '--storage.tsdb.path=/prometheus'\\n\" +\n                \"      - '--web.console.libraries=/etc/prometheus/console_libraries'\\n\" +\n                \"      - '--web.console.templates=/etc/prometheus/consoles'\\n\" +\n                \"      - '--storage.tsdb.retention.time=200h'\\n\" +\n                \"      - '--web.enable-lifecycle'\\n\" +\n                \"    networks:\\n\" +\n                \"      - rpc-network\\n\" +\n                \"    restart: unless-stopped\\n\" +\n                \"\\n\" +\n                \"  grafana:\\n\" +\n                \"    image: grafana/grafana:latest\\n\" +\n                \"    container_name: rpc-grafana\\n\" +\n                \"    ports:\\n\" +\n                \"      - \\\"3000:3000\\\"\\n\" +\n                \"    volumes:\\n\" +\n                \"      - grafana-data:/var/lib/grafana\\n\" +\n                \"      - ../monitoring/grafana-dashboard.json:/etc/grafana/provisioning/dashboards/rpc-dashboard.json\\n\" +\n                \"    environment:\\n\" +\n                \"      - GF_SECURITY_ADMIN_PASSWORD=admin\\n\" +\n                \"    networks:\\n\" +\n                \"      - rpc-network\\n\" +\n                \"    restart: unless-stopped\\n\" +\n                \"\\n\" +\n                \"networks:\\n\" +\n                \"  rpc-network:\\n\" +\n                \"    driver: bridge\\n\" +\n                \"\\n\" +\n                \"volumes:\\n\" +\n                \"  prometheus-data:\\n\" +\n                \"  grafana-data:\\n\";\n    }\n    \n    /**\n     * 生成Docker构建脚本\n     */\n    private static String generateDockerBuildScript() {\n        return \"#!/bin/bash\\n\" +\n                \"\\n\" +\n                \"# Docker Build Script for RPC Framework\\n\" +\n                \"\\n\" +\n                \"set -e\\n\" +\n                \"\\n\" +\n                \"SCRIPT_DIR=\\\"$(cd \\\"$(dirname \\\"${BASH_SOURCE[0]}\\\")\\\" && pwd)\\\"\\n\" +\n                \"\\n\" +\n                \"# Configuration\\n\" +\n                \"IMAGE_NAME=\\\"rpc-framework\\\"\\n\" +\n                \"IMAGE_TAG=${1:-latest}\\n\" +\n                \"REGISTRY=${2:-localhost:5000}\\n\" +\n                \"\\n\" +\n                \"echo \\\"Building Docker image: $IMAGE_NAME:$IMAGE_TAG\\\"\\n\" +\n                \"\\n\" +\n                \"# Build the image\\n\" +\n                \"docker build -t \\\"$IMAGE_NAME:$IMAGE_TAG\\\" \\\"$SCRIPT_DIR\\\"\\n\" +\n                \"\\n\" +\n                \"# Tag for registry\\n\" +\n                \"if [ \\\"$REGISTRY\\\" != \\\"\\\" ]; then\\n\" +\n                \"    docker tag \\\"$IMAGE_NAME:$IMAGE_TAG\\\" \\\"$REGISTRY/$IMAGE_NAME:$IMAGE_TAG\\\"\\n\" +\n                \"    echo \\\"Tagged image: $REGISTRY/$IMAGE_NAME:$IMAGE_TAG\\\"\\n\" +\n                \"fi\\n\" +\n                \"\\n\" +\n                \"# Show image info\\n\" +\n                \"echo \\\"\\nImage built successfully:\\\"\\n\" +\n                \"docker images | grep \\\"$IMAGE_NAME\\\"\\n\" +\n                \"\\n\" +\n                \"echo \\\"\\nTo run the container:\\\"\\n\" +\n                \"echo \\\"  docker run -d -p 8080:8080 -p 9999:9999 --name rpc-server $IMAGE_NAME:$IMAGE_TAG\\\"\\n\" +\n                \"\\n\" +\n                \"echo \\\"To push to registry:\\\"\\n\" +\n                \"echo \\\"  docker push $REGISTRY/$IMAGE_NAME:$IMAGE_TAG\\\"\\n\";\n    }\n    \n    /**\n     * 写入Properties文件\n     */\n    private static void writePropertiesFile(String filePath, Properties properties, String comment) \n            throws IOException {\n        Path path = Paths.get(filePath);\n        Files.createDirectories(path.getParent());\n        \n        try (java.io.FileOutputStream fos = new java.io.FileOutputStream(path.toFile())) {\n            properties.store(fos, comment);\n        }\n        \n        logger.info(\"Generated configuration: {}\", path.toAbsolutePath());\n    }\n    \n    /**\n     * 写入文件\n     */\n    private static void writeFile(String filePath, String content) throws IOException {\n        Path path = Paths.get(filePath);\n        Files.createDirectories(path.getParent());\n        Files.write(path, content.getBytes(\"UTF-8\"));\n        \n        // 设置可执行权限（如果是脚本文件）\n        if (filePath.endsWith(\".sh\")) {\n            path.toFile().setExecutable(true);\n        }\n        \n        logger.info(\"Generated file: {}\", path.toAbsolutePath());\n    }\n    \n    public static void main(String[] args) {\n        logger.info(\"RPC Framework Production Deployment Guide\");\n        logger.info(\"===========================================\");\n        \n        generateProductionConfigs();\n        \n        logger.info(\"\\n✅ Production deployment configurations generated successfully!\");\n        logger.info(\"\\nNext steps:\");\n        logger.info(\"1. Review and customize configurations in production/config/\");\n        logger.info(\"2. Build your application JAR files\");\n        logger.info(\"3. Copy JAR files to production/lib/\");\n        logger.info(\"4. Run deployment: ./production/scripts/deploy.sh prod\");\n        logger.info(\"5. Monitor with: ./production/scripts/health-check.sh\");\n        logger.info(\"\\nFor Docker deployment:\");\n        logger.info(\"1. cd production/docker\");\n        logger.info(\"2. ./build.sh\");\n        logger.info(\"3. docker-compose up -d\");\n    }\n}